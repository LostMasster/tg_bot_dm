import asyncio
import time
import re
from aiogram import Bot, Dispatcher, Router
from aiogram.types import (Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from igbore_git import tg_token, admin_id, consultant_dm, consultant_andrej
from datetime import datetime, timedelta
from postgre_sql import users_languages
import pytz
from crm import new_lead
from aiogram.utils.markdown import hlink


dp = Dispatcher(storage=MemoryStorage())
router_rodo = Router()
bot = Bot(token=tg_token)

timezone='Europe/Warsaw'
now = datetime.now(pytz.timezone(timezone))
formatted_now = now.strftime("%d.%m.%Y %H:%M:%S")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–∫–≤–∏—Ç–∞—à–∫–∏"
@router_rodo.callback_query(lambda c: c.data == 'get_sign_up_for_repairs')
async def handler_get_rodo(callback_query: CallbackQuery):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    rodo_link = hlink("–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π","https://dmajster.pl/polityka-prywatnosci")

    user_id = callback_query.from_user.id
    print(f"–ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–≤–∏—Ç–∞—à–∫—É, —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {users_languages[user_id]}")

    if users_languages[user_id] == "ru":
        button_rodo = InlineKeyboardButton(text='–°–æ–≥–ª–∞—Å–µ–Ω', callback_data='form_start')
        button_cancel = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—ã', callback_data='form_cancel')
        text = (f'üëã –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º –≤–∞—Å –Ω–∞ —Ä–µ–º–æ–Ω—Ç.\n\n'
                f'–ü–µ—Ä–µ–¥ —ç—Ç–∏–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, \n<a href="https://dmajster.pl/polityka-prywatnosci">'
                f'üëâ–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–πüëà</a>:\n'
                f'–ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à–µ –∏–º—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã–µ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.\n'
                f'üîí –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –∏—Ö —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n\n'
                f'üí° –ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–°–æ–≥–ª–∞—Å–µ–Ω", –∏ –º—ã —Å—Ä–∞–∑—É –Ω–∞—á–Ω—ë–º! üòä')

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_rodo], [button_cancel]])

        await callback_query.message.answer(f"{text}", reply_markup=keyboard, parse_mode="HTML")

    elif users_languages[user_id] == "ua":
        button_rodo = InlineKeyboardButton(text='–ü–æ–≥–æ–¥–∂—É—é—Å—å', callback_data='form_start')
        button_cancel = InlineKeyboardButton(text='–°–∫–∞—Å—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É', callback_data='form_cancel')

        text = (
            "üëã –ß—É–¥–æ–≤–æ! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º–æ –≤–∞—Å –Ω–∞ —Ä–µ–º–æ–Ω—Ç.\n\n"
            "–ü–µ—Ä–µ–¥ —Ü–∏–º, –±—É–¥—å –ª–∞—Å–∫–∞, \n<a href='https://dmajster.pl/polityka-prywatnosci'>"
            "üëâ–æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ –≤–∞–∂–ª–∏–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—éüëà</a>:\n"
            "–ù–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤–∞—à–µ —ñ–º‚Äô—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –¥–∞–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—é, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞—è–≤–∫—É —ñ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –≤–∞–º–∏.\n"
            "üîí –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü—ñ –¥–∞–Ω—ñ –ª–∏—à–µ –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç —ñ –Ω–µ –ø–µ—Ä–µ–¥–∞—î–º–æ —ó—Ö —Ç—Ä–µ—Ç—ñ–º –æ—Å–æ–±–∞–º.\n\n"
            "üí° –Ø–∫—â–æ –≤–∏ –∑–≥–æ–¥–Ω—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü–æ–≥–æ–¥–∂—É—é—Å—å¬ª, —ñ –º–∏ –æ–¥—Ä–∞–∑—É –ø–æ—á–Ω–µ–º–æ! üòä"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_rodo], [button_cancel]])
        await callback_query.message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    elif users_languages[user_id] == "en":
        button_rodo = InlineKeyboardButton(text='Agree', callback_data='form_start')
        button_cancel = InlineKeyboardButton(text='Cancel form', callback_data='form_cancel')

        text = (
            "üëã Great! Let's get you scheduled for a repair.\n\n"
            "Before we begin, please read this important information:\n"
            "We‚Äôll need your name, phone number, and device details to create a request and contact you.\n"
            "üîí We use this data only for repair registration and do not share it with third parties.\n\n"
            "üí° If you agree, click ‚ÄúAgree‚Äù and we‚Äôll get started right away! üòä"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_rodo], [button_cancel]])
        await callback_query.message.answer(text, reply_markup=keyboard)

    else:
        button_rodo = InlineKeyboardButton(text='Zgadzam siƒô', callback_data='form_start')
        button_cancel = InlineKeyboardButton(text='Anuluj formularz', callback_data='form_cancel')

        text = (
            "üëã ≈öwietnie! Zapiszmy Ciƒô na naprawƒô.\n\n"
            "Zanim zaczniemy, zapoznaj siƒô proszƒô z wa≈ºnymi informacjami:\n"
            "Potrzebujemy Twojego imienia, numeru telefonu i danych urzƒÖdzenia, aby zarejestrowaƒá zg≈Çoszenie i siƒô z TobƒÖ skontaktowaƒá.\n"
            "üîí U≈ºywamy tych danych wy≈ÇƒÖcznie do rejestracji naprawy i nie przekazujemy ich osobom trzecim.\n\n"
            "üí° Je≈õli siƒô zgadzasz, kliknij ‚ÄûZgadzam siƒô‚Äù i zaczniemy! üòä"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_rodo], [button_cancel]])
        await callback_query.message.answer(text, reply_markup=keyboard)


# FSM: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã
class Form(StatesGroup):
    waiting_for_name = State()
    # waiting_for_date_of_birth = State()
    waiting_for_phone_number = State()
    waiting_for_device_name = State()
    waiting_for_malfunction = State()
    waiting_for_date_of_visit = State()


@router_rodo.callback_query(lambda c: c.data == 'form_start')
async def form_start(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    user_id = callback_query.from_user.id
    await state.update_data(user_language=users_languages[user_id])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–∏—è –†–û–î–û
    await state.update_data(push_button_time=formatted_now)

    button_cancel = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—ã', callback_data='form_cancel')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_cancel]])

    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é: ", reply_markup=keyboard)
    await state.set_state(Form.waiting_for_name)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –≤ —Å–ª–æ–≤–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
async def word_test(name):
    return all(word.isalpha() for word in name.split())


@router_rodo.message(Form.waiting_for_name)
async def form_name(message: Message, state: FSMContext):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞
        # words = message.text.split()
        # if len(words) != 2:
        #     raise ValueError(await message.answer("–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Ç–æ–ª—å–∫–æ –∏–º—è –ª–∏–±–æ —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é"))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤
        # first_name, last_name = words
        # if not first_name.isalpha() or not last_name.isalpha():
        #     raise ValueError(await message.answer("–í –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"))

        if not message.text.replace(" ", "").isalpha():
            raise ValueError(await message.answer("–í –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"))

        button_cancel = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—ã', callback_data='form_cancel')
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_cancel]])

        contact_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç",
                                                                         request_contact=True)]],
                                               resize_keyboard=True)

        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤ –Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ '
                             '"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç" –∏–ª–∏...', reply_markup=contact_keyboard)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", reply_markup=keyboard)
        await state.update_data(name=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        await state.set_state(Form.waiting_for_phone_number)

    except ValueError as e:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º—è –∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
            "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã")


@router_rodo.message(Form.waiting_for_phone_number)
async def form_phon_number(message: Message, state: FSMContext):
    button_cancel = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—ã', callback_data='form_cancel')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_cancel]])
    if not message.contact:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º—É–º 11 —Ü–∏—Ñ—Ä, –≤–∫–ª—é—á–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–π –∑–Ω–∞–∫ +
            if not re.fullmatch(r'\+?\d{11,}', message.text):
                raise ValueError(await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 11 '
                                                      '—Ü–∏—Ñ—Ä –∏ –±—ã—Ç—å –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ', reply_markup=keyboard))
            await state.update_data(phone_number=message.text) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ', reply_markup=keyboard)
            await state.set_state(Form.waiting_for_device_name)
        except ValueError as e: \
            await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É')
    else:
        user_phone = message.contact.phone_number
        await state.update_data(phone_number=user_phone) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=ReplyKeyboardRemove())
        await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ', reply_markup=keyboard)
        await state.set_state(Form.waiting_for_device_name)


# @router_rodo.message(Form.waiting_for_phone_number)
# async def form_phon_number(message: Message, state: FSMContext):
#     button_cancel = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—ã', callback_data='form_cancel')
#     keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_cancel]])
#     try:
#         # –ü—Ä–æ–≤–µ—Ä–∞–µ–º —á—Ç–æ –≤ –Ω–æ–º–µ—Ä–µ –Ω–µ –º–µ–Ω—å—à–µ 9 —Ü–∏—Ñ—Ä
#         if not len(message.text) >= 9:
#             raise ValueError(await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü—ã—Ñ—Ä –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω—ã–º 9', reply_markup=keyboard))
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –Ω–æ–º–µ—Ä–µ –Ω–µ—Ç –±—É–∫–≤ –∏–ª–∏ –∑–Ω–∞–∫–æ–≤
#         if not message.text.isdigit():
#             raise ValueError(await message.answer('–í –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±—É–∫–≤ –∏–ª–∏ –∑–Ω–∞–∫–æ–≤',reply_markup=keyboard))
#
#         await state.update_data(phone_number=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
#         await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ', reply_markup=keyboard)
#         await state.set_state(Form.waiting_for_device_name)
#     except ValueError as e:
#         await message.answer('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É')


@router_rodo.message(Form.waiting_for_device_name)
async def form_device(message: Message, state: FSMContext):
    button_cancel = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—ã', callback_data='form_cancel')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_cancel]])

    await message.answer(text='–û–ø–∏—à–∏—Ç–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ', reply_markup=keyboard)
    await state.update_data(device_name=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(Form.waiting_for_malfunction)


@router_rodo.callback_query(lambda c: c.data == 'form_cancel')
async def form_start(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await state.clear()
    await callback_query.message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ñ–æ—Ä–º—É', reply_markup=ReplyKeyboardRemove())


@router_rodo.message(Form.waiting_for_malfunction)
async def form_malfunction(message: Message, state: FSMContext):
    button_cancel = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—ã', callback_data='form_cancel')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_cancel]])

    await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–π—Ç–∏: ', reply_markup=keyboard)

    await state.update_data(malfunction=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å

    await state.set_state(Form.waiting_for_date_of_visit)


@router_rodo.message(Form.waiting_for_date_of_visit)
async def form_date_of_visit(message: Message, state: FSMContext):
    await state.update_data(date_of_visit=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –î–∞—Ç—É –≤–∏–∑–∏—Ç–∞

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_id = message.from_user.id
    chat = await bot.get_chat(user_id)
    username = chat.username if chat.username else "Username –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    user_data = await state.get_data()
    time_push_button = user_data['push_button_time']
    name = user_data['name']
    # birth = user_data['birth']
    phone = user_data['phone_number']
    device_name = user_data['device_name']
    malfunction = user_data['malfunction']
    date_of_visit = user_data['date_of_visit']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–∏–µ–º–∫—É
    await bot.send_message(
        chat_id=admin_id,
        text=(
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
            f"–ö–ª–∏–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –†–û–î–û: {time_push_button}\n"
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–æ\n"
            f"–ò–º—è: {name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}\n"
            f"–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å: {malfunction}\n"
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –¢–µ–ª–µ–≥—Ä–∞–º PHONE: üëâ tg://user?id={user_id}\n"
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –¢–µ–ª–µ–≥—Ä–∞–º PC: üëâ https://t.me/{username}"
        ),
    )

    status_rm = await new_lead(klient_name=name, klient_telefon=phone, model=device_name,
                               malfunction=malfunction, date_of_visit=date_of_visit,
                               date_accept_rodo=time_push_button)

    if status_rm == True:
        button_work_time = InlineKeyboardButton(text='üëâ –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏ ?üìç',
                                                callback_data='get_work_info')

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_work_time]])

        # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM
        await state.clear()
        await message.answer("üéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
                             "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–µ–º–æ–Ω—Ç!\n"
                             "–ö–æ–≥–¥–∞ –≤—ã –ø—Ä–∏–¥—ë—Ç–µ –∫ –Ω–∞–º –Ω–∞ —Å–µ—Ä–≤–∏—Å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∏–∫—Ç—É–π—Ç–µ –≤–∞—à "
                             "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ü–∏–∏, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ä–∞–∑—É —É–≤–∏–¥–∏—Ç –≤–∞—à—É –∑–∞–ø–∏—Å—å.",
                             reply_markup=keyboard)
    else:
        await message.answer("error please try again later")
        print('=======ERROE form_date_of_visit=======')
