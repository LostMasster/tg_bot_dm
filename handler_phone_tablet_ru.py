from aiogram.filters.state import StateFilter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
import asyncio
from igbore_git import bot
from postgre_sql import users_languages
# from parsing_DM_ru import price_funk
from google_sheets_price import get_iPhone_price


router_phon_tab_ru = Router()


async def menu_buttons(user_language, mode=0):
    try:
        buttons = []
        if user_language == 'ru':
            buttons.append([InlineKeyboardButton(text='üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
                                                 callback_data=f'ask_consultant')],)
            buttons.append([InlineKeyboardButton(text='üõ†Ô∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç',
                                                 callback_data='get_sign_up_for_repairs')])
            buttons.append([InlineKeyboardButton(text='üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é',
                                                 callback_data='get_phone_iphone')])
            buttons.append([InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                 callback_data=f'choice_language_{user_language}')])
            if mode == 1:
                button = [InlineKeyboardButton(text="‚ùì –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∫–æ–ø–∏–µ–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º",
                                               callback_data="get_model_iphone_1_1_orig-or-copy-disp")]
                buttons.append(button)
            if mode == 2:
                button = [InlineKeyboardButton(text="‚ùì –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∫–æ–ø–∏–µ–π –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º",
                                               callback_data="get_model_iphone_1_1_orig-or-copy-bat")]
                buttons.append(button)
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            return keyboard

        elif user_language == 'ua':
            buttons.append([InlineKeyboardButton(text="üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                                                 callback_data=f'ask_consultant')],)
            buttons.append([InlineKeyboardButton(text='üõ†Ô∏è –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç',
                                                 callback_data='get_sign_up_for_repairs')])
            buttons.append([InlineKeyboardButton(text='üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é',
                                                 callback_data='get_phone_iphone')])
            buttons.append([InlineKeyboardButton(text='üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é',
                                                 callback_data=f'choice_language_{user_language}')])
            if mode == 1:
                button = [InlineKeyboardButton(text="‚ùì –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –∫–æ–ø—ñ—î—é —Ç–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª–æ–º",
                                               callback_data="get_model_iphone_1_1_orig-or-copy-disp")]
                buttons.append(button)
            if mode == 2:
                button = [InlineKeyboardButton(text="‚ùì –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –∫–æ–ø—ñ—î—é —Ç–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª–æ–º",
                                               callback_data="get_model_iphone_1_1_orig-or-copy-bat")]
                buttons.append(button)
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            return keyboard

        elif user_language == 'en':
            buttons.append([InlineKeyboardButton(text='üìû Contact the manager',
                                                 callback_data=f'ask_consultant')],)
            buttons.append([InlineKeyboardButton(text='üõ†Ô∏è Book a repair',
                                                 callback_data='get_sign_up_for_repairs')])
            buttons.append([InlineKeyboardButton(text='üîÑ Return to previous menu',
                                                 callback_data='get_phone_iphone')])
            buttons.append([InlineKeyboardButton(text='üîô Return to main menu',
                                                 callback_data=f'choice_language_{user_language}')])
            if mode == 1:
                button = [InlineKeyboardButton(text="‚ùì Difference between a copy and the original",
                                               callback_data="get_model_iphone_1_1_orig-or-copy-disp")]
                buttons.append(button)
            if mode == 2:
                button = [InlineKeyboardButton(text="‚ùì Difference between a copy and the original",
                                               callback_data="get_model_iphone_1_1_orig-or-copy-bat")]
                buttons.append(button)
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            return keyboard

        else:
            buttons.append([InlineKeyboardButton(text='üìû Skontaktuj siƒô z mened≈ºerem',
                                                 callback_data=f'ask_consultant')],)
            buttons.append([InlineKeyboardButton(text='üõ†Ô∏è Um√≥w siƒô na naprawƒô',
                                                 callback_data='get_sign_up_for_repairs')])
            buttons.append([InlineKeyboardButton(text='üîÑ Powr√≥t do poprzedniego menu',
                                                 callback_data='get_phone_iphone')])
            buttons.append([InlineKeyboardButton(text='üîô Powr√≥t do menu g≈Ç√≥wnego',
                                                 callback_data=f'choice_language_{user_language}')])
            if mode == 1:
                button = [InlineKeyboardButton(text="‚ùì R√≥≈ºnica miƒôdzy kopiƒÖ a orygina≈Çem",
                                               callback_data="get_model_iphone_1_1_orig-or-copy-disp")]
                buttons.append(button)
            if mode == 2:
                button = [InlineKeyboardButton(text="‚ùì R√≥≈ºnica miƒôdzy kopiƒÖ a orygina≈Çem",
                                               callback_data="get_model_iphone_1_1_orig-or-copy-bat")]
                buttons.append(button)
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            return keyboard
    except KeyError:
        return 'Nie wybra≈Çe≈õ jƒôzyka'


@router_phon_tab_ru.callback_query(lambda c: c.data == 'get_phone_tablet')
async def handler_get_phone_tab_ru(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    print(users_languages)
    buttons = [
        [InlineKeyboardButton(text='üçè iPhone', callback_data='get_phone_iphone')],
        [InlineKeyboardButton(text='üçé iPad', callback_data='get_phone_ipad')],
        [InlineKeyboardButton(text='ü§ñ Android', callback_data='get_phone_android')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=keyboard)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã –∏ –ø–ª–∞–Ω—à–µ—Ç—ã"
@router_phon_tab_ru.callback_query(lambda c: c.data == 'get_phone_iphone')
async def handler_get_phone_tab_ru(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    await callback_query.message.edit_reply_markup(reply_markup=None)

    try:
        if users_languages[user_id] == 'ru':
            buttons = [
                [InlineKeyboardButton(text='üõ†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (0 PLN)', callback_data='get_diagnostic')],
                [InlineKeyboardButton(text='üí° –ó–∞–º–µ–Ω–∞ —Å—Ç–µ–∫–ª–∞ –¥–∏—Å–ø–ª–µ—è', callback_data='get_iphone_repair-glas-lcd')],
                [InlineKeyboardButton(text='‚ú® –ó–∞–º–µ–Ω–∞ –¥–∏—Å–ø–ª–µ—è', callback_data='get_iphone_display-replacement')],
                [InlineKeyboardButton(text='üì≤ –ó–∞–º–µ–Ω–∞ –∫–æ—Ä–ø—É—Å–∞ "–ö–æ–ø–∏—è"', callback_data='get_iphone_replacement-case')],
                [InlineKeyboardButton(text='üîã –ó–∞–º–µ–Ω–∞ –±–∞—Ç–∞—Ä–µ–∏', callback_data='get_iphone_battery-replacement')],
                [InlineKeyboardButton(text='üîô –ó–∞–º–µ–Ω–∞ –∑–∞–¥–Ω–µ–π –∫—Ä—ã—à–∫–∏', callback_data='get_iphone_back-cover')],
                [InlineKeyboardButton(text='‚ö° –ó–∞–º–µ–Ω–∞ —Ä–∞–∑—ä—ë–º–∞ –∑–∞—Ä—è–¥–∫–∏', callback_data='get_iphone_charg-conn')],
                [InlineKeyboardButton(text='üîä –ó–∞–º–µ–Ω–∞ –¥–∏–Ω–∞–º–∏–∫–∞', callback_data='get_iphone_repl-speaker')],
                [InlineKeyboardButton(text='‚ùå –ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è', callback_data='get_iphone_does-not-turn-on')],
                [InlineKeyboardButton(text='üåä –ü—Ä–æ–±–ª–µ–º—ã –ø–æ—Å–ª–µ –≤–æ–¥—ã', callback_data='get_iphone_probl-after-water')],
                [InlineKeyboardButton(text='üéôÔ∏è –ß–∏—Å—Ç–∫–∞ –¥–∏–Ω–∞–º–∏–∫–æ–≤', callback_data='get_iphone_clean-speaker')],
                [InlineKeyboardButton(text='üîÑ Phone Refresh 3 –≤ 1', callback_data='get_iphone_phone-refresh')],
                [InlineKeyboardButton(text='üíé –ü–æ–ª–∏—Ä–æ–≤–∫–∞ iPhone', callback_data='get_iphone_display-polishing')],
                [InlineKeyboardButton(text='üõ†Ô∏è –î—Ä—É–≥–∞—è —É—Å–ª—É–≥–∞', callback_data='get_sign_up_for_repairs')],
                [InlineKeyboardButton(text='üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é', callback_data='get_phone_tablet')],
                [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'choice_language_{users_languages[user_id]}')]
            ]

            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.answer('üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É: ', reply_markup=keyboard)

        elif users_languages[user_id] == 'ua':
            buttons = [
                [InlineKeyboardButton(text='üõ†Ô∏è –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (0 PLN)', callback_data='get_diagnostic')],
                [InlineKeyboardButton(text='üí° –ó–∞–º—ñ–Ω–∞ —Å–∫–ª–∞ –¥–∏—Å–ø–ª–µ—è', callback_data='get_iphone_repair-glas-lcd')],
                [InlineKeyboardButton(text='‚ú® –ó–∞–º—ñ–Ω–∞ –¥–∏—Å–ø–ª–µ—è', callback_data='get_iphone_display-replacement')],
                [InlineKeyboardButton(text='üì≤ –ó–∞–º—ñ–Ω–∞ –∫–æ—Ä–ø—É—Å—É "–ö–æ–ø—ñ—è"', callback_data='get_iphone_replacement-case')],
                [InlineKeyboardButton(text='üîã –ó–∞–º—ñ–Ω–∞ –±–∞—Ç–∞—Ä–µ—ó', callback_data='get_iphone_battery-replacement')],
                [InlineKeyboardButton(text='üîô –ó–∞–º—ñ–Ω–∞ –∑–∞–¥–Ω—å–æ—ó –∫—Ä–∏—à–∫–∏', callback_data='get_iphone_back-cover')],
                [InlineKeyboardButton(text="‚ö° –ó–∞–º—ñ–Ω–∞ —Ä–æ–∑'—î–º—É –∑–∞—Ä—è–¥–∫–∏", callback_data='get_iphone_charg-conn')],
                [InlineKeyboardButton(text='üîä –ó–∞–º—ñ–Ω–∞ –¥–∏–Ω–∞–º—ñ–∫–∞', callback_data='get_iphone_repl-speaker')],
                [InlineKeyboardButton(text='‚ùå –ù–µ –≤–º–∏–∫–∞—î—Ç—å—Å—è', callback_data='get_iphone_does-not-turn-on')],
                [InlineKeyboardButton(text='üåä –ü—Ä–æ–±–ª–µ–º–∏ –ø—ñ—Å–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∑ –≤–æ–¥–æ—é', callback_data='get_iphone_probl-after-water')],
                [InlineKeyboardButton(text='üéôÔ∏è –ß–∏—â–µ–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫—ñ–≤', callback_data='get_iphone_clean-speaker')],
                [InlineKeyboardButton(text='üîÑ Phone Refresh 3 –≤ 1', callback_data='get_iphone_phone-refresh')],
                [InlineKeyboardButton(text='üíé –ü–æ–ª—ñ—Ä—É–≤–∞–Ω–Ω—è iPhone', callback_data='get_iphone_display-polishing')],
                [InlineKeyboardButton(text='üõ†Ô∏è –Ü–Ω—à–∞ –ø–æ—Å–ª—É–≥–∞', callback_data='get_sign_up_for_repairs')],
                [InlineKeyboardButton(text='üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é', callback_data='get_phone_tablet')],
                [InlineKeyboardButton(text='üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data=f'choice_language_{users_languages[user_id]}')]
            ]

            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.answer('üëâ –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É: ', reply_markup=keyboard)

        elif users_languages[user_id] == 'en':
            buttons = [
                [InlineKeyboardButton(text='üõ†Ô∏è Diagnostics (0 PLN)', callback_data='get_diagnostic')],
                [InlineKeyboardButton(text='üí° Screen glass replacement', callback_data='get_iphone_repair-glas-lcd')],
                [InlineKeyboardButton(text='‚ú® Display replacement', callback_data='get_iphone_display-replacement')],
                [InlineKeyboardButton(text='üì≤ Replacing the case "copy"', callback_data='get_iphone_replacement-case')],
                [InlineKeyboardButton(text='üîã Battery replacement', callback_data='get_iphone_battery-replacement')],
                [InlineKeyboardButton(text='üîô Back cover replacement', callback_data='get_iphone_back-cover')],
                [InlineKeyboardButton(text="‚ö° Charging port replacement", callback_data='get_iphone_charg-conn')],
                [InlineKeyboardButton(text='üîä Speaker replacement', callback_data='get_iphone_repl-speaker')],
                [InlineKeyboardButton(text='‚ùå Does not turn on', callback_data='get_iphone_does-not-turn-on')],
                [InlineKeyboardButton(text='üåä Water damage issues', callback_data='get_iphone_probl-after-water')],
                [InlineKeyboardButton(text='üéôÔ∏è Speaker cleaning', callback_data='get_iphone_clean-speaker')],
                [InlineKeyboardButton(text='üîÑ Phone Refresh 3 in 1', callback_data='get_iphone_phone-refresh')],
                [InlineKeyboardButton(text='üíé iPhone polishing', callback_data='get_iphone_display-polishing')],
                [InlineKeyboardButton(text='üõ†Ô∏è Other service', callback_data='get_sign_up_for_repairs')],
                [InlineKeyboardButton(text='üîÑ Return to previous menu', callback_data='get_phone_tablet')],
                [InlineKeyboardButton(text='üîô Return to main menu', callback_data=f'choice_language_{users_languages[user_id]}')]
            ]

            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.answer('üëâ Please select a service: ', reply_markup=keyboard)

        else:
            buttons = [
                [InlineKeyboardButton(text='üõ†Ô∏è Diagnostyka (0 PLN)', callback_data='get_diagnostic')],
                [InlineKeyboardButton(text='üí° Wymiana szybki wy≈õwietlacza', callback_data='get_iphone_repair-glas-lcd')],
                [InlineKeyboardButton(text='‚ú® Wymiana wy≈õwietlacza', callback_data='get_iphone_display-replacement')],
                [InlineKeyboardButton(text='üì≤ Wymiana korpusu "Copy"', callback_data='get_iphone_replacement-case')],
                [InlineKeyboardButton(text='üîã Wymiana baterii', callback_data='get_iphone_battery-replacement')],
                [InlineKeyboardButton(text='üîô Wymiana tylnej obudowy', callback_data='get_iphone_back-cover')],
                [InlineKeyboardButton(text="‚ö° Wymiana z≈ÇƒÖcza ≈Çadowania", callback_data='get_iphone_charg-conn')],
                [InlineKeyboardButton(text='üîä Wymiana g≈Ço≈õnika', callback_data='get_iphone_repl-speaker')],
                [InlineKeyboardButton(text='‚ùå Nie w≈ÇƒÖcza siƒô', callback_data='get_iphone_does-not-turn-on')],
                [InlineKeyboardButton(text='üåä Problemy po zalaniu wodƒÖ', callback_data='get_iphone_probl-after-water')],
                [InlineKeyboardButton(text='üéôÔ∏è Czyszczenie g≈Ço≈õnik√≥w', callback_data='get_iphone_clean-speaker')],
                [InlineKeyboardButton(text='üîÑ Phone Refresh 3 w 1', callback_data='get_iphone_phone-refresh')],
                [InlineKeyboardButton(text='üíé Polerowanie iPhone', callback_data='get_iphone_display-polishing')],
                [InlineKeyboardButton(text='üõ†Ô∏è Inna us≈Çuga', callback_data='get_sign_up_for_repairs')],
                [InlineKeyboardButton(text='üîÑ Powr√≥t do poprzedniego menu', callback_data='get_phone_tablet')],
                [InlineKeyboardButton(text='üîô Powr√≥t do menu g≈Ç√≥wnego', callback_data=f'choice_language_{users_languages[user_id]}')]
            ]

            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.answer('üëâ Proszƒô wybraƒá us≈Çugƒô: ', reply_markup=keyboard)
    except KeyError:
        await callback_query.message.answer('Nie wybra≈Çe≈õ jƒôzyka')


@router_phon_tab_ru.callback_query(lambda c: c.data == 'get_diagnostic')
async def get_diagnostic_func(callback_query: CallbackQuery):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    user_id = callback_query.from_user.id
    try:
        if users_languages[user_id] == 'ru':
            buttons = [
                [InlineKeyboardButton(text='üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', callback_data=f'ask_consultant')],
                [InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
                                      callback_data=f'choice_language_{users_languages[user_id]}')],
                [InlineKeyboardButton(text='üõ†Ô∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç', callback_data='get_sign_up_for_repairs')]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.\n\n'
                                                'üìã –ö–æ—Ä–æ—Ç–∫–æ –æ–± —É—Å–ª—É–≥–µ:\n\n'
                                                '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É –Ω–∞—Å –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è!\n'
                                                '–í—Ä–µ–º—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: –æ—Ç –ø–∞—Ä—ã '
                                                '–º–∏–Ω—É—Ç –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π ( –≤—Å–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ'
                                                ' –∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª–æ–º–∫–∏ )\n'
                                                '‚è≥ –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Å—Ä–æ–∫–∏ —Å–º–æ–∂–µ–º —Å–æ–æ–±—â–∏—Ç—å –ø—Ä–∏ –ø—Ä–∏—ë–º–µ '
                                                '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å–µ.–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ'
                                                ' —Ñ–æ—Ä–º—É –Ω–∏–∂–µ:', reply_markup=keyboard)
        elif users_languages[user_id] == 'ua':
            buttons = [
                [InlineKeyboardButton(text="üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data=f'ask_consultant')],
                [InlineKeyboardButton(text='üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é',
                                      callback_data=f'choice_language_{users_languages[user_id]}')],
                [InlineKeyboardButton(text='üõ†Ô∏è –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç', callback_data='get_sign_up_for_repairs')]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.answer('–í–∏ –æ–±—Ä–∞–ª–∏ –ø–æ—Å–ª—É–≥—É –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.\n\n'
                                                '–ö–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ –ø–æ—Å–ª—É–≥—É:\n\n'
                                                '–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É –Ω–∞—Å –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞!\n'
                                                '–ß–∞—Å, –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Ö '
                                                '—Ö–≤–∏–ª–∏–Ω –¥–æ –∫—ñ–ª—å–∫–æ—Ö –¥–Ω—ñ–≤ (–≤—Å–µ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ —Ç–∞ '
                                                '–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø–æ–ª–æ–º–∫–∏).\n'
                                                '‚è≥ –ë—ñ–ª—å—à —Ç–æ—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –∑–º–æ–∂–µ–º–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–∏ '
                                                '–ø—Ä–∏–π–æ–º—ñ –ø—Ä–∏—Å—Ç—Ä–æ—é –Ω–∞ —Å–µ—Ä–≤—ñ—Å. '
                                                '–©–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –Ω–∏–∂—á–µ:',
                                                reply_markup=keyboard)
        elif users_languages[user_id] == 'pl':
            buttons = [
                [InlineKeyboardButton(text='üìû Skontaktuj siƒô z mened≈ºerem', callback_data=f'ask_consultant')],
                [InlineKeyboardButton(text='üîô Powr√≥t do menu',
                                      callback_data=f'choice_language_{users_languages[user_id]}')],
                [InlineKeyboardButton(text='üõ†Ô∏è Um√≥w siƒô na naprawƒô', callback_data='get_sign_up_for_repairs')]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.answer('Wybra≈Çe≈õ us≈Çugƒô Diagnostyka.\n\n'
                                                'üìã Kr√≥tko o us≈Çudze:\n\n'
                                                'Diagnostyka u nas jest ca≈Çkowicie bezp≈Çatna!\n'
                                                'Czas potrzebny na diagnostykƒô: od kilku minut '
                                                'do kilku dni (wszystko jest indywidualne i '
                                                'zale≈ºy od skomplikowania usterki)\n'
                                                '‚è≥ Dok≈Çadne terminy bƒôdziemy mogli podaƒá przy '
                                                'przyjƒôciu urzƒÖdzenia do serwisu. Aby siƒô '
                                                'zapisaƒá, wype≈Çnij poni≈ºszy formularz:',
                                                reply_markup=keyboard)
        elif users_languages[user_id] == 'en':
            buttons = [
                [InlineKeyboardButton(text='üìû Contact the manager', callback_data=f'ask_consultant')],
                [InlineKeyboardButton(text='üîô Return to menu',
                                      callback_data=f'choice_language_{users_languages[user_id]}')],
                [InlineKeyboardButton(text='üõ†Ô∏è Book a repair', callback_data='get_sign_up_for_repairs')]
            ]
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.answer('You have selected the Diagnostics service.\n\n'
                                                'üìã Briefly about the service:\n\n'
                                                'Diagnostics with us are absolutely free!\n'
                                                'The time required for diagnostics: from a few '
                                                'minutes to several days (everything is individual '
                                                'and depends on the complexity of the malfunction)\n'
                                                '‚è≥ We will be able to provide more accurate '
                                                'timelines when receiving the device at the service.'
                                                ' To book an appointment, fill out the form below:',
                                                reply_markup=keyboard)
    except KeyError:
        await callback_query.message.answer('Nie wybra≈Çe≈õ jƒôzyka')



# –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ó–∞–º–µ–Ω–∞ —Å—Ç–µ–∫–ª–∞ –¥–∏—Å–ø–ª–µ—è
@router_phon_tab_ru.callback_query(lambda c: c.data.startswith('get_iphone_'))
async def get_repair_glas_lcd_func(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    service = callback_query.data.split('_')[2]
    print(service)
    print('–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ üí° –ó–∞–º–µ–Ω–∞ —Å—Ç–µ–∫–ª–∞ –¥–∏—Å–ø–ª–µ—è')
    await callback_query.message.edit_reply_markup(reply_markup=None)
    buttons = [
        [InlineKeyboardButton(text='üçè iPhone 16', callback_data=f'get_iPhone_16_{service}')],
        [InlineKeyboardButton(text='üçè iPhone 15', callback_data=f'get_iPhone_15_{service}')],
        [InlineKeyboardButton(text='üçè iPhone 14', callback_data=f'get_iPhone_14_{service}')],
        [InlineKeyboardButton(text='üçè iPhone 13', callback_data=f'get_iPhone_13_{service}')],
        [InlineKeyboardButton(text='üçè iPhone 12', callback_data=f'get_iPhone_12_{service}')],
        [InlineKeyboardButton(text='üçè iPhone 11', callback_data=f'get_iPhone_11_{service}')],
        [InlineKeyboardButton(text='üçè iPhone X', callback_data=f'get_iPhone_X_{service}')],
        [InlineKeyboardButton(text='üçè iPhone SE', callback_data=f'get_iPhone_SE_{service}')],
        [InlineKeyboardButton(text='üçè iPhone 8', callback_data=f'get_iPhone_8_{service}')],
        [InlineKeyboardButton(text='üçè iPhone 7', callback_data=f'get_iPhone_7_{service}')],
        [InlineKeyboardButton(text='üçè iPhone 6', callback_data=f'get_iPhone_6_{service}')],
        [InlineKeyboardButton(text='üçè iPhone 5', callback_data=f'get_iPhone_5_{service}')]
    ]

    try:
        if users_languages[user_id] == 'ru':
            buttons.append([InlineKeyboardButton(text='üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
                                                 callback_data=f'ask_consultant')],)
            buttons.append([InlineKeyboardButton(text='üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é',
                                                 callback_data='get_phone_iphone')])
            buttons.append([InlineKeyboardButton(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                 callback_data=f'choice_language_{users_languages[user_id]}')])
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.answer('–°–ø–∞—Å–∏–±–æ! üòä\n üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ'
                                                ' iPhone –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:', reply_markup=keyboard)
        elif users_languages[user_id] == 'ua':
            buttons.append([InlineKeyboardButton(text="üìû –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                                                 callback_data=f'ask_consultant')],)
            buttons.append([InlineKeyboardButton(text='üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é',
                                                 callback_data='get_phone_iphone')])
            buttons.append([InlineKeyboardButton(text='üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é',
                                                 callback_data=f'choice_language_{users_languages[user_id]}')])
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.answer('–î—è–∫—É—é! üòä\n üëâ '
                                                '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å —Å–≤–æ–≥–æ iPhone –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ:',
                                                reply_markup=keyboard)
        elif users_languages[user_id] == 'en':
            buttons.append([InlineKeyboardButton(text='üìû Contact the manager',
                                                 callback_data=f'ask_consultant')],)
            buttons.append([InlineKeyboardButton(text='üîÑ Return to previous menu',
                                                 callback_data='get_phone_iphone')])
            buttons.append([InlineKeyboardButton(text='üîô Return to main menu',
                                                 callback_data=f'choice_language_{users_languages[user_id]}')])
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.answer('Thank you! üòä\n üëâ '
                                                'Please select your iPhone model from the list below:',
                                                reply_markup=keyboard)
        else:
            buttons.append([InlineKeyboardButton(text='üìû Skontaktuj siƒô z mened≈ºerem',
                                                 callback_data=f'ask_consultant')],)
            buttons.append([InlineKeyboardButton(text='üîÑ Powr√≥t do poprzedniego menu',
                                                 callback_data='get_phone_iphone')])
            buttons.append([InlineKeyboardButton(text='üîô Powr√≥t do menu g≈Ç√≥wnego',
                                                 callback_data=f'choice_language_{users_languages[user_id]}')])
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.answer("Dziƒôkujƒô! üòä\n üëâ "
                                                "Proszƒô wybraƒá model swojego iPhone'a z poni≈ºszej listy:",
                                                reply_markup=keyboard)
    except KeyError:
        await callback_query.message.answer('Nie wybra≈Çe≈õ jƒôzyka')


@router_phon_tab_ru.callback_query(lambda c: c.data.startswith('get_iPhone_'))
async def get_iPhone_func(callback_query: CallbackQuery):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    model_num, service = callback_query.data.split('_')[2:]
    buttons = []
    pro_max = InlineKeyboardButton(text='Pro Max', callback_data=f'get_model_iphone_{model_num}_Pro-Max_{service}')
    pro = InlineKeyboardButton(text='Pro', callback_data=f'get_model_iphone_{model_num}_Pro_{service}')
    plus = InlineKeyboardButton(text='Plus', callback_data=f'get_model_iphone_{model_num}_Plus_{service}')
    clean = InlineKeyboardButton(text=' ', callback_data=f'get_model_iphone_{model_num}__{service}')
    mini = InlineKeyboardButton(text='Mini', callback_data=f'get_model_iphone_{model_num}_mini_{service}')
    XR = InlineKeyboardButton(text='XR', callback_data=f'get_model_iphone_XR__{service}')
    XS = InlineKeyboardButton(text='XS', callback_data=f'get_model_iphone_XS__{service}')
    XS_MAX = InlineKeyboardButton(text='XS_MAX', callback_data=f'get_model_iphone_XS_Max_{service}')
    X = InlineKeyboardButton(text='X', callback_data=f'get_model_iphone_X__{service}')
    SE_2022 = InlineKeyboardButton(text='2022', callback_data=f'get_model_iphone_{model_num}_2022_{service}')
    SE_2020 = InlineKeyboardButton(text='2020', callback_data=f'get_model_iphone_{model_num}_2020_{service}')
    SE_2016 = InlineKeyboardButton(text='2016', callback_data=f'get_model_iphone_{model_num}_2016_{service}')
    s_plus = InlineKeyboardButton(text='S Plus', callback_data=f'get_model_iphone_6s Plus__{service}')
    s6 = InlineKeyboardButton(text='S', callback_data=f'get_model_iphone_6s__{service}')
    s5 = InlineKeyboardButton(text='S', callback_data=f'get_model_iphone_5S__{service}')
    c = InlineKeyboardButton(text='C', callback_data=f'get_model_iphone_5C__{service}')
    back = InlineKeyboardButton(text='üîô', callback_data='get_repair_glas_lcd')

    if model_num in ['16', '15', '14']:
        buttons.append(pro_max), buttons.append(pro), buttons.append(plus), buttons.append(clean),
        buttons.append(back)
    elif model_num in ['13', '12']:
        buttons.append(pro_max), buttons.append(pro), buttons.append(mini), buttons.append(clean),
        buttons.append(back)
    elif model_num == '11':
        buttons.append(pro_max), buttons.append(pro), buttons.append(clean),buttons.append(back)
    elif model_num == 'X':
        buttons.append(XS_MAX), buttons.append(XS), buttons.append(XR), buttons.append(X),
        buttons.append(back)
    elif model_num == 'SE':
        buttons.append(SE_2022), buttons.append(SE_2020), buttons.append(SE_2016), buttons.append(back)
    elif model_num in ['8', '7']:
        buttons.append(plus), buttons.append(clean), buttons.append(back)
    elif model_num == '6':
        buttons.append(s_plus), buttons.append(s6), buttons.append(plus), buttons.append(clean),
        buttons.append(back)
    elif model_num == '5':
        buttons.append(s5), buttons.append(clean), buttons.append(c), buttons.append(back)
    else:
        await callback_query.message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    keyboard_16_15_14 = InlineKeyboardMarkup(inline_keyboard=[buttons])
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=keyboard_16_15_14)


@router_phon_tab_ru.callback_query(lambda c: c.data.startswith('get_model_iphone_'))
async def get_model_iphone_func(callback_query: CallbackQuery):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    user_id = callback_query.from_user.id
    model_numer, model, service = callback_query.data.split('_')[3:]
    model = model.replace('-', ' ')
    keyboard = await menu_buttons(users_languages[user_id])
    print(f"model_numer = {model_numer}, model = {model}, service = {service}")
    if service == 'repair-glas-lcd':
        # text = await price_funk('D:/project_Python/telegram_bot2/json_file_dm/phones_conn_disp.json', service)
        text = await get_iPhone_price(model_numer, model, service, users_languages[user_id])
        print(f"text = {text}")
        await callback_query.message.answer(f'{text}', reply_markup=keyboard)

    elif service == "display-replacement":
        text = await get_iPhone_price(model_numer, model, service, users_languages[user_id])
        print(f"text = {text}")
        keyboard = await menu_buttons(users_languages[user_id], 1)
        await callback_query.message.answer(f"{text}", reply_markup=keyboard)

    elif service == "back-cover":
        text = await get_iPhone_price(model_numer, model, service, users_languages[user_id])
        print(f"text = {text}")
        await callback_query.message.answer(f'{text}', reply_markup=keyboard)

    elif service == "replacement-case":
        text = await get_iPhone_price(model_numer, model, service, users_languages[user_id])
        print(f"{text}")
        await callback_query.message.answer(f'{text}', reply_markup=keyboard)

    elif service == "battery-replacement":
        text = await get_iPhone_price(model_numer, model, service, users_languages[user_id])
        print(f"{text}")
        keyboard_disp = await menu_buttons(users_languages[user_id], 2)
        await callback_query.message.answer(f'{text}', reply_markup=keyboard_disp)

    elif service == "charg-conn":
        text = await get_iPhone_price(model_numer, model, service, users_languages[user_id])
        print(f"{text}")
        await callback_query.message.answer(f'{text}', reply_markup=keyboard)

    elif service == "repl-speaker":
        text = await get_iPhone_price(model_numer, model, service, users_languages[user_id])
        print(f"{text}")
        await callback_query.message.answer(f'{text}', reply_markup=keyboard)

    elif service == "does-not-turn-on":
        text = await get_iPhone_price(model_numer, model, service, users_languages[user_id])
        print(f"{text}")
        await callback_query.message.answer(f'{text}', reply_markup=keyboard)

    elif service == "probl-after-water":
        text = await get_iPhone_price(model_numer, model, service, users_languages[user_id])
        print(f"{text}")
        await callback_query.message.answer(f'{text}', reply_markup=keyboard)
    elif service == "clean-speaker":
        await callback_query.message.answer("üßΩ Czyszczenie g≈Ço≈õnik√≥w bƒôdzie kosztowaƒá 20z≈Ç.‚ò∫Ô∏è "
                                            "≈öredni czas 5 minut", reply_markup=keyboard)
    elif service == "phone-refresh":
        await callback_query.message.answer("None")

    elif service == "orig-or-copy-disp":
        if users_languages[user_id] == "pl":
            await callback_query.message.answer(
                "W por√≥wnaniu kopii z orygina≈Çem, oto g≈Ç√≥wne r√≥≈ºnice:\n"
                "Kopia jest uwa≈ºana za bardziej podatnƒÖ na uszkodzenia "
                "mechaniczne. Niewielki odsetek u≈ºytkownik√≥w zauwa≈ºa r√≥≈ºnicƒô "
                "w odwzorowaniu kolor√≥w kopii w por√≥wnaniu do orygina≈Çu i/lub "
                "r√≥≈ºnice w czu≈Ço≈õci ekranu dotykowego (touchscreena).\n"
                "Zawsze chƒôtnie pomo≈ºemy Pa≈Ñstwu w wyborze! üòä",
                reply_markup=keyboard
            )
        elif users_languages[user_id] == "ru":
            await callback_query.message.answer(
                "–í —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –∫–æ–ø–∏–∏, –≤–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è:\n"
                "–ö–æ–ø–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –±–æ–ª–µ–µ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω–Ω–æ–π –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º. –ù–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–º–µ—á–∞–µ—Ç "
                "—Ä–∞–∑–Ω–∏—Ü—É –≤ —Ü–≤–µ—Ç–æ–ø–µ—Ä–µ–¥–∞—á–µ –∫–æ–ø–∏–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –∏/–∏–ª–∏ —Ä–∞–∑–ª–∏—á–∏—è –≤ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.\n"
                "–ú—ã –≤—Å–µ–≥–¥–∞ —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º –í–∞–º —Å –≤—ã–±–æ—Ä–æ–º! üòä",
                reply_markup=keyboard
            )
        elif users_languages[user_id] == "ua":
            await callback_query.message.answer(
                "–£ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—ñ –∫–æ–ø—ñ—ó –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª–æ–º, –æ—Å—å –æ—Å–Ω–æ–≤–Ω—ñ –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ:\n"
                "–ö–æ–ø—ñ—è –≤–≤–∞–∂–∞—î—Ç—å—Å—è –±—ñ–ª—å—à –≤—Ä–∞–∑–ª–∏–≤–æ—é –¥–æ –º–µ—Ö–∞–Ω—ñ—á–Ω–∏—Ö –ø–æ—à–∫–æ–¥–∂–µ–Ω—å. –ù–µ–≤–µ–ª–∏–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ–º—ñ—á–∞—î "
                "—Ä—ñ–∑–Ω–∏—Ü—é —É –ø–µ—Ä–µ–¥–∞—á—ñ –∫–æ–ª—å–æ—Ä—ñ–≤ –∫–æ–ø—ñ—ó –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª–æ–º —ñ/–∞–±–æ —Ä—ñ–∑–Ω–∏—Ü—é –≤ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ –µ–∫—Ä–∞–Ω—É.\n"
                "–ú–∏ –∑–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –í–∞–º –∑ –≤–∏–±–æ—Ä–æ–º! üòä",
                reply_markup=keyboard
            )
        elif users_languages[user_id] == "en":
            await callback_query.message.answer(
                "When comparing a copy to the original, here are the main differences:\n"
                "The copy is considered more prone to mechanical damage. A small percentage of users notice "
                "differences in color reproduction compared to the original and/or differences in touchscreen sensitivity.\n"
                "We‚Äôre always happy to help you choose! üòä",
                reply_markup=keyboard
            )

    elif service == "orig-or-copy-bat":
        if users_languages[user_id] == "ru":
            await callback_query.message.answer(
                "‚öôÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ '–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ'?\n"
                "–ö–æ–º–ø–∞–Ω–∏—è Apple –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç –Ω–æ–≤—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ –±—Ä–µ–Ω–¥–æ–º\n"
                "Apple –≤ —Ä–æ–∑–Ω–∏—á–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ. –û–¥–Ω–∞–∫–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ —ç—Ç–∏—Ö –±–∞—Ç–∞—Ä–µ–π, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ —Ç–µ –∂–µ\n"
                "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤ –∏—Ö –ø—Ä–æ–¥–∞–∂–µ.\n\n"
                "–ë–∞—Ç–∞—Ä–µ–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º:\n"
                "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –Ω–∞ —Ç–µ—Ö –∂–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö, —á—Ç–æ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª.\n"
                "–ö–∞–∂–¥–∞—è –±–∞—Ç–∞—Ä–µ—è –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä.\n\n"
                "‚öôÔ∏è  –ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–ø–∏—è?\n"
                "–ö–æ–ø–∏—è ‚Äî —ç—Ç–æ –±–∞—Ç–∞—Ä–µ—è, –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ "
                "—Å –≤–∞—à–µ–π –º–æ–¥–µ–ª—å—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.",
                reply_markup=keyboard
            )
        elif users_languages[user_id] == "ua":
            await callback_query.message.answer(
                "‚öôÔ∏è –©–æ —Ç–∞–∫–µ '–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å'?\n"
                "–ö–æ–º–ø–∞–Ω—ñ—è Apple –Ω–µ –ø—Ä–æ–¥–∞—î –Ω–æ–≤–∏—Ö –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö –±–∞—Ç–∞—Ä–µ–π —ñ–∑ –ª–æ–≥–æ—Ç–∏–ø–æ–º —Ç–∞ –±—Ä–µ–Ω–¥–æ–º "
                "Apple —É —Ä–æ–∑–¥—Ä—ñ–±–Ω–æ–º—É –ø—Ä–æ–¥–∞–∂—É. –û–¥–Ω–∞–∫ –≤–∏—Ä–æ–±–Ω–∏–∫–∏ —Ü–∏—Ö –±–∞—Ç–∞—Ä–µ–π, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å "
                "—Ç—ñ —Å–∞–º—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏, –Ω–µ –æ–±–º–µ–∂–µ–Ω—ñ –≤ —ó—Ö –ø—Ä–æ–¥–∞–∂—É.\n\n"
                "–ë–∞—Ç–∞—Ä–µ—ó, —è–∫—ñ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ:\n"
                "–í–∏–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –∑ —Ç–∏—Ö —Å–∞–º–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤, —â–æ –π –æ—Ä–∏–≥—ñ–Ω–∞–ª.\n"
                "–ö–æ–∂–Ω–∞ –±–∞—Ç–∞—Ä–µ—è –º–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä.\n\n"
                "‚öôÔ∏è –©–æ —Ç–∞–∫–µ –∫–æ–ø—ñ—è?\n"
                "–ö–æ–ø—ñ—è ‚Äî —Ü–µ –±–∞—Ç–∞—Ä–µ—è, –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –±—É–ª–∞ —Å—É–º—ñ—Å–Ω–∞ –∑ –≤–∞—à–æ—é "
                "–º–æ–¥–µ–ª–ª—é —Ç–µ–ª–µ—Ñ–æ–Ω—É, –∞–ª–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏.",
                reply_markup=keyboard
            )
        elif users_languages[user_id] == "pl":
            await callback_query.message.answer(
                "‚öôÔ∏è Czym jest jako≈õƒá oryginalna?\n"
                "Firma Apple nie sprzedaje nowych oryginalnych baterii z logo i markƒÖ Apple w sprzeda≈ºy "
                "detalicznej. Jednak producenci tych baterii, kt√≥rzy stosujƒÖ te same technologie i "
                "komponenty, nie majƒÖ ogranicze≈Ñ w ich sprzeda≈ºy.\n\n"
                "Baterie, kt√≥re stosujemy:\n\n"
                "Wyprodukowane z tych samych komponent√≥w, co orygina≈Ç.\n"
                "Ka≈ºda bateria ma unikalny numer seryjny.\n\n"
                "‚öôÔ∏è Czym jest kopia?\n"
                "Kopia ‚Äî to bateria, wyprodukowana w taki spos√≥b, aby by≈Ça kompatybilna z Pa≈Ñstwa "
                "modelem telefonu, ale nie wykorzystuje oryginalnych komponent√≥w.",
                reply_markup=keyboard
            )
        elif users_languages[user_id] == "en":
            await callback_query.message.answer(
                "‚öôÔ∏è What is 'original quality'?\n"
                "Apple does not sell new original batteries with its logo and brand in retail.\n"
                "However, manufacturers of these batteries, using the same technologies "
                "and components, are not restricted in their sales.\n\n"
                "The batteries we use:\n\n"
                "Are made from the same components as the original.\n"
                "Each battery has a unique serial number.\n\n"
                "‚öôÔ∏è What is a copy?\n"
                "A copy is a battery manufactured to be compatible with your phone "
                "model but does not use original components.",
                reply_markup=keyboard
            )

    elif service == "display-polishing":
        text = await get_iPhone_price(model_numer, model, service, users_languages[user_id])
        await callback_query.message.answer(f"{text}", reply_markup=keyboard)





